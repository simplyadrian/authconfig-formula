### SALTSTACK MANAGED!!! ####

{% from "authconfig/map.jinja" import authconfig with context %}
{% from "authconfig/secrets.sls" import pass %}
{% set srv = salt['cmd.run']('source /var/tmp/srvlookup/bin/activate && python /var/tmp/dclocator.py ' + authconfig.domain, python_shell=True) %}
{% do authconfig.update({ 'sssd_pass': pass }) %}
{% do authconfig.update({ 'servers': srv.split(',') }) %}

{% if authconfig.debug_mode %}
debug_level = 3
{% endif %}

domains = {{ authconfig.domain }}

services = nss, pam
config_file_version = 2

# Use this if users are being logged in at /.
# This example (/home/%d/%u) specifies /home/DOMAIN-FQDN/user as $HOME.  Use with pam_mkhomedir.so
{% if authconfig.override_homedir %}
override_homedir = {{ authconfig.override_homedir }}
{% endif %}

# If the client machine hostname doesn't match the computer object on the DC.
{% if authconfig.ad_hostname %}
ad_hostname = {{ grains['hostname'] }}
{% endif %}

{% if grains['os_family'] == 'Debian' %}
filter_users = root,daemon,bin,sys,sync,games,man,lp,mail,news,uucp,proxy,www-data,backup,nobody,syslog,sshd,vagrant,ubuntu
filter_groups = root,daemon,bin,sys,sync,games,man,lp,mail,news,uucp,proxy,www-data,backup,nobody,syslog,sshd,vagrant,ubuntu
{% endif %}

[domain/{{ authconfig.domain }}]

access_provider = {{ authconfig.provider }}
ldap_access_order = host
ldap_user_authorized_host = host
id_provider = {{ authconfig.provider }}
ldap_uri = {% for s in authconfig.servers %}ldap://{{s}}/{% if not loop.last %},{% endif %}{% endfor %}

{% if authconfig.ldap_schema %}
ldap_schema = {{ authconfig.ldap_schema }}
{% endif %}

ldap_search_base = {{ authconfig.basedn }}
ldap_default_bind_dn = {{ authconfig.bind_user }}

{% if authconfig.ldap_authtok %}
ldap_default_authtok_type = obfuscated_password
ldap_default_authtok = {{ authconfig.sssd_pass }}
{% endif %}

{% if authconfig.ldap_tls %}
ldap_id_use_start_tls = true
ldap_tls_reqcert = allow
{% endif %}

{% if authconfig.realm %}
auth_provider = krb5
krb5_server = {{ authconfig.servers |join(',')}}
krb5_realm = {{ authconfig.realm }}
{% endif %}

cache_credentials = true
enumerate = false
min_id = 1
